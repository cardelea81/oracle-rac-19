---
- name: Oracle Grid Infrastructure Patching
  hosts: all
  become: yes
  vars_files:
    - vars/oracle_rac_vars.yml
  
  vars:
    grid_home: /services/oracle/grid/19.3/grid_home
    grid_user: grid
    patches_directory: /services/oracle/gridhome/patches
    opatch_patch: p6880880_121010_Linux-x86-64.zip
    psu_patch: p34762026_190000_Linux-x86-64.zip
    psu_patch_number: "34762026"

  tasks:
    # Pre-patching checks
    - name: Pre-patching system checks
      shell: |
        echo "=== Pre-Patching Checks ==="
        echo "Current date: $(date)"
        echo "Grid Home: {{ grid_home }}"
        echo "Grid user: {{ grid_user }}"
        
        # Check if Grid is running
        echo ""
        echo "=== Grid Infrastructure Status ==="
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl stat res -t 2>/dev/null || echo "Grid may not be running"
        
        # Check current OPatch version
        echo ""
        echo "=== Current OPatch Version ==="
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch version 2>/dev/null || echo "OPatch not found or not working"
        
        # Check available disk space
        echo ""
        echo "=== Disk Space Check ==="
        df -h {{ grid_home }}
        df -h {{ patches_directory | dirname }}
      register: pre_patch_check
      tags: [pre_check]

    - name: Display pre-patching check results
      debug:
        var: pre_patch_check.stdout_lines
      tags: [pre_check]

    # Create patches directory and copy patch files
    - name: Create patches directory
      file:
        path: "{{ patches_directory }}"
        state: directory
        owner: "{{ grid_user }}"
        group: oinstall
        mode: '0755'
      tags: [prep]

    - name: Check if patch files exist
      stat:
        path: "{{ item }}"
      register: patch_files_check
      with_items:
        - "patch/{{ opatch_patch }}"
        - "patch/{{ psu_patch }}"
      tags: [prep]

    - name: Display patch files status
      debug:
        msg: |
          OPatch file ({{ opatch_patch }}): {{ patch_files_check.results[0].stat.exists | default(false) }}
          PSU file ({{ psu_patch }}): {{ patch_files_check.results[1].stat.exists | default(false) }}
      tags: [prep]

    # Stop Grid Infrastructure (if running)
    - name: Stop Grid Infrastructure services
      shell: |
        echo "Stopping Grid Infrastructure services..."
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl stop cluster -all || echo "Grid cluster stop failed or not running"
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl stop has || echo "HAS stop failed or not running"
        sleep 10
        
        # Verify services are stopped
        echo "Checking if services are stopped..."
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl stat res -t || echo "Grid services appear to be stopped"
      register: stop_grid
      become_user: "{{ grid_user }}"
      tags: [stop_grid]
      when: "'oracle_rac_node1' in group_names"  # Only run on first node

    - name: Display Grid stop results
      debug:
        var: stop_grid.stdout_lines
      when: stop_grid is defined
      tags: [stop_grid]

    # Backup current OPatch
    - name: Backup current OPatch directory
      shell: |
        if [ -d "{{ grid_home }}/OPatch" ]; then
          echo "Backing up existing OPatch..."
          cp -r {{ grid_home }}/OPatch {{ grid_home }}/OPatch.backup.$(date +%Y%m%d_%H%M%S)
          echo "Backup completed"
        else
          echo "No existing OPatch directory found"
        fi
      register: backup_opatch
      become_user: "{{ grid_user }}"
      tags: [backup]

    # Remove old OPatch and install new one
    - name: Remove old OPatch directory
      file:
        path: "{{ grid_home }}/OPatch"
        state: absent
      tags: [install_opatch]

    - name: Extract new OPatch to Grid Home
      unarchive:
        src: "patch/{{ opatch_patch }}"
        dest: "{{ grid_home }}"
        owner: "{{ grid_user }}"
        group: oinstall
        remote_src: no
      tags: [install_opatch]

    - name: Set OPatch permissions
      file:
        path: "{{ grid_home }}/OPatch"
        state: directory
        owner: "{{ grid_user }}"
        group: oinstall
        mode: '0755'
        recurse: yes
      tags: [install_opatch]

    # Verify new OPatch installation
    - name: Verify new OPatch installation
      shell: |
        echo "=== New OPatch Version ==="
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch version
        
        echo ""
        echo "=== OPatch lsinventory ==="
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch lsinventory || echo "lsinventory failed"
      register: verify_opatch
      tags: [verify_opatch]

    - name: Display OPatch verification
      debug:
        var: verify_opatch.stdout_lines
      tags: [verify_opatch]

    # Extract PSU patch
    - name: Extract PSU patch
      unarchive:
        src: "patch/{{ psu_patch }}"
        dest: "{{ patches_directory }}"
        owner: "{{ grid_user }}"
        group: oinstall
        remote_src: no
      tags: [extract_psu]

    # Apply PSU patch using gridSetup.sh
    - name: Apply PSU patch using gridSetup.sh
      shell: |
        cd {{ grid_home }}
        echo "Starting PSU application..."
        echo "Patch location: {{ patches_directory }}/{{ psu_patch_number }}"
        
        # Check if patch directory exists
        if [ -d "{{ patches_directory }}/{{ psu_patch_number }}" ]; then
          echo "Patch directory found. Applying PSU..."
          ./gridSetup.sh -silent -applyPSU {{ patches_directory }}/{{ psu_patch_number }}
        else
          echo "ERROR: Patch directory not found!"
          echo "Available directories in patches:"
          ls -la {{ patches_directory }}/
          exit 1
        fi
      register: apply_psu
      become_user: "{{ grid_user }}"
      tags: [apply_psu]
      when: "'oracle_rac_node1' in group_names"  # Apply on first node first

    - name: Display PSU application results
      debug:
        var: apply_psu.stdout_lines
      when: apply_psu is defined
      tags: [apply_psu]

    # Post-patch verification
    - name: Post-patch verification
      shell: |
        echo "=== Post-Patch Verification ==="
        echo "OPatch version:"
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch version
        
        echo ""
        echo "=== Applied Patches ==="
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch lspatches
        
        echo ""
        echo "=== Inventory Summary ==="
        sudo -u {{ grid_user }} {{ grid_home }}/OPatch/opatch lsinventory -summary
      register: post_patch_verify
      tags: [verify]

    - name: Display post-patch verification
      debug:
        var: post_patch_verify.stdout_lines
      tags: [verify]

    # Start Grid Infrastructure services
    - name: Start Grid Infrastructure services
      shell: |
        echo "Starting Grid Infrastructure services..."
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl start has
        sleep 30
        
        echo "Starting cluster..."
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl start cluster -all
        sleep 60
        
        echo "Final status check..."
        sudo -u {{ grid_user }} {{ grid_home }}/bin/crsctl stat res -t
      register: start_grid
      become_user: "{{ grid_user }}"
      tags: [start_grid]
      when: "'oracle_rac_node1' in group_names"

    - name: Display Grid start results
      debug:
        var: start_grid.stdout_lines
      when: start_grid is defined
      tags: [start_grid]

    # Final summary
    - name: Patching summary
      debug:
        msg: |
          ===============================================
          Oracle Grid Infrastructure Patching Summary
          ===============================================
          Node: {{ inventory_hostname }}
          Grid Home: {{ grid_home }}
          OPatch Patch: {{ opatch_patch }}
          PSU Patch: {{ psu_patch }}
          PSU Number: {{ psu_patch_number }}
          
          Status: {% if apply_psu is defined and apply_psu.rc == 0 %}SUCCESS{% else %}PENDING/CHECK LOGS{% endif %}
          
          Next Steps:
          1. Verify cluster status: crsctl stat res -t
          2. Apply same patch to other nodes if this is node 1
          3. Check database status after all nodes patched
          ===============================================
      tags: [summary] 