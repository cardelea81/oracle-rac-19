---
- name: Download and Prepare Oracle Grid Patch Files
  hosts: all
  become: yes
  vars:
    patch_source_dir: /tmp/oracle_patches  # Where patch files will be downloaded
    grid_patch_dir: /services/oracle/gridhome/patch
    patch_base_url: "{{ oracle_patch_urls.base_url }}"
    patches: "{{ oracle_patches }}"

  tasks:
    # Step 1: Download patch files
    - name: Create patch download directory
      file:
        path: "{{ patch_source_dir }}"
        state: directory
        mode: '0755'
      tags: [download, prep_dirs]

    - name: Test connectivity to patch server
      uri:
        url: "{{ patch_base_url }}"
        method: GET
        status_code: [200, 403, 404]
      register: server_test
      ignore_errors: yes
      tags: [download, test_connection]

    - name: Display server connectivity
      debug:
        msg: |
          Server Test Results:
          URL: {{ patch_base_url }}
          Status: {{ server_test.status | default('FAILED') }}
          {% if server_test.status is defined %}
          ✓ Server is reachable
          {% else %}
          ✗ Server connection failed: {{ server_test.msg | default('Unknown error') }}
          {% endif %}
      tags: [download, test_connection]

    - name: Download Oracle patch files
      get_url:
        url: "{{ item.url }}"
        dest: "{{ patch_source_dir }}/{{ item.filename }}"
        mode: '0644'
        timeout: 300
        validate_certs: no
      with_items: "{{ patches }}"
      register: download_results
      tags: [download]

    - name: Display download results
      debug:
        msg: |
          Download Results for {{ item.item.filename }}:
          Status: {{ 'SUCCESS' if item.changed else 'ALREADY EXISTS' if not item.failed else 'FAILED' }}
          {% if item.failed is defined and item.failed %}
          Error: {{ item.msg | default('Unknown error') }}
          {% endif %}
      with_items: "{{ download_results.results }}"
      tags: [download]

    # Step 2: Prepare patch files
    # Create patch directories
    - name: Create patch directories
      file:
        path: "{{ item }}"
        state: directory
        owner: grid
        group: oinstall
        mode: '0755'
      with_items:
        - "{{ grid_patch_dir }}"
        - /services/oracle/gridhome/patches
      tags: [prep_dirs]

    # Check source patch files
    - name: Check if source patch files exist
      stat:
        path: "{{ patch_source_dir }}/{{ item.filename }}"
      register: source_files_check
      with_items: "{{ patches }}"
      tags: [check_source]

    - name: Display source files status
      debug:
        msg: |
          Source patch files status:
          {% for item in source_files_check.results %}
          {{ item.item.filename }} ({{ item.item.description }}): {{ 'EXISTS' if item.stat.exists else 'MISSING' }}
          {% endfor %}
      tags: [check_source]

    # Copy patch files to grid patch directory
    - name: Copy patch files to grid patch directory
      copy:
        src: "{{ patch_source_dir }}/{{ item.item.filename }}"
        dest: "{{ grid_patch_dir }}/{{ item.item.filename }}"
        owner: grid
        group: oinstall
        mode: '0644'
        remote_src: yes
      with_items: "{{ source_files_check.results }}"
      when: item.stat.exists
      tags: [copy_patches]

    # Verify copied files
    - name: Verify copied patch files
      stat:
        path: "{{ grid_patch_dir }}/{{ item.filename }}"
      register: copied_files_check
      with_items: "{{ patches }}"
      tags: [verify_copy]

    - name: Display copied files status
      debug:
        msg: |
          Copied patch files status:
          {% for item in copied_files_check.results %}
          {{ grid_patch_dir }}/{{ item.item.filename }}: {{ 'OK' if item.stat.exists else 'MISSING' }}
          Size: {{ item.stat.size | default(0) }} bytes
          {% endfor %}
      tags: [verify_copy]

    # Create a simple inventory of patches
    - name: Create patch inventory file
      shell: |
        echo "Oracle Grid Infrastructure Patch Inventory" > {{ grid_patch_dir }}/patch_inventory.txt
        echo "Generated on: $(date)" >> {{ grid_patch_dir }}/patch_inventory.txt
        echo "Node: {{ inventory_hostname }}" >> {{ grid_patch_dir }}/patch_inventory.txt
        echo "" >> {{ grid_patch_dir }}/patch_inventory.txt
        echo "Available Patches:" >> {{ grid_patch_dir }}/patch_inventory.txt
        {% for patch in patches %}
        if [ -f "{{ grid_patch_dir }}/{{ patch.filename }}" ]; then
          echo "✓ {{ patch.filename }} - {{ patch.description }}" >> {{ grid_patch_dir }}/patch_inventory.txt
          echo "  Size: $(ls -lh {{ grid_patch_dir }}/{{ patch.filename }} | awk '{print $5}')" >> {{ grid_patch_dir }}/patch_inventory.txt
        else
          echo "✗ {{ patch.filename }} - {{ patch.description }} (MISSING)" >> {{ grid_patch_dir }}/patch_inventory.txt
        fi
        {% endfor %}
        
        chown grid:oinstall {{ grid_patch_dir }}/patch_inventory.txt
      tags: [inventory]

    - name: Display patch inventory
      shell: cat {{ grid_patch_dir }}/patch_inventory.txt
      register: patch_inventory
      tags: [inventory]

    - name: Show patch inventory
      debug:
        var: patch_inventory.stdout_lines
      tags: [inventory]

    # Final preparation summary
    - name: Download and preparation summary
      debug:
        msg: |
          ========================================================
          Oracle Grid Patch Download and Preparation Complete
          ========================================================
          Node: {{ inventory_hostname }}
          Source Directory: {{ patch_source_dir }}
          Grid Patch Directory: {{ grid_patch_dir }}
          
          Downloaded Files:
          {% for item in download_results.results %}
          - {{ item.item.filename }}: {{ 'SUCCESS' if item.changed else 'ALREADY EXISTS' if not item.failed else 'FAILED' }}
          {% endfor %}
          
          Prepared Files:
          {% for item in copied_files_check.results %}
          - {{ item.item.filename }}: {{ 'READY' if item.stat.exists else 'MISSING' }}
          {% endfor %}
          
          Next Steps:
          1. All nodes now have patches downloaded and prepared
          2. Apply patches using one of these playbooks:
             
             Simple version (your exact commands):
             ansible-playbook simple-grid-patch.yml -i tests/inventory
             
             Comprehensive version (with safety checks):
             ansible-playbook grid-patching-playbook.yml -i tests/inventory
          ========================================================
      tags: [summary] 