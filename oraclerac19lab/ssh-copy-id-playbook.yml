---
- name: Enable SSH access for Oracle RAC users using ssh-copy-id
  hosts: all
  become: yes
  vars_files:
    - vars/oracle_rac_vars.yml

  tasks:
    # Debug groups to see what's available
    - name: Debug available groups and hosts
      debug:
        msg: |
          All groups: {{ groups.keys() | list }}
          Current host: {{ inventory_hostname }}
          All hosts: {{ groups['all'] | default([]) }}
          Oracle RAC: {{ groups['oracle_rac'] | default('NOT FOUND') }}
          Oracle RAC Node1: {{ groups['oracle_rac_node1'] | default('NOT FOUND') }}
          Oracle RAC Node2: {{ groups['oracle_rac_node2'] | default('NOT FOUND') }}
      tags: [debug]

    # First ensure SSH keys exist
    - name: Ensure SSH keys exist for grid user
      openssh_keypair:
        path: /services/oracle/gridhome/.ssh/id_rsa
        type: rsa
        size: 2048
        owner: grid
        group: oinstall
        mode: '0600'
      tags: [ssh_keys]

    - name: Ensure SSH keys exist for oracle user
      openssh_keypair:
        path: /services/oracle/orahome/.ssh/id_rsa
        type: rsa
        size: 2048
        owner: oracle
        group: oinstall
        mode: '0600'
      tags: [ssh_keys]

    # Build the target host list more robustly
    - name: Set target hosts for SSH copy
      set_fact:
        target_hosts: "{{ (groups['oracle_rac'] | default([])) | union(groups['oracle_rac_node1'] | default([])) | union(groups['oracle_rac_node2'] | default([])) | difference([inventory_hostname]) | unique }}"
      tags: [ssh_setup]

    - name: Debug target hosts
      debug:
        msg: "Target hosts for SSH copy: {{ target_hosts }}"
      tags: [debug]

    # SSH copy for grid user to all other nodes
    - name: Enable ssh access for user grid to all nodes
      become_user: grid
      shell: |
        set timeout 300
        spawn ssh-copy-id -i /services/oracle/gridhome/.ssh/id_rsa.pub {{ item }}
        expect {
          "Are you sure you want to continue connecting (yes/no/[fingerprint])?" {
            send "yes\r"
            exp_continue
          }
          "*password:" {
            send "grid\r"
            exp_continue
          }
          eof
        }
      args:
        executable: /usr/bin/expect
      with_items: "{{ target_hosts }}"
      when: target_hosts | length > 0
      ignore_errors: yes
      tags: [grid_ssh_copy]

    # SSH copy for oracle user to all other nodes  
    - name: Enable ssh access for user oracle to all nodes
      become_user: oracle
      shell: |
        set timeout 300
        spawn ssh-copy-id -i /services/oracle/orahome/.ssh/id_rsa.pub {{ item }}
        expect {
          "Are you sure you want to continue connecting (yes/no/[fingerprint])?" {
            send "yes\r"
            exp_continue
          }
          "*password:" {
            send "oracle\r"
            exp_continue
          }
          eof
        }
      args:
        executable: /usr/bin/expect
      with_items: "{{ target_hosts }}"
      when: target_hosts | length > 0
      ignore_errors: yes
      tags: [oracle_ssh_copy]

    # Test SSH connectivity
    - name: Test SSH connectivity for grid user
      become_user: grid
      shell: |
        for node in {{ target_hosts | join(' ') }}; do
          echo "Testing grid SSH to $node:"
          ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no grid@$node 'echo "Successfully connected to $HOSTNAME as grid user"' || echo "Failed to connect to $node"
        done
      register: grid_ssh_test
      when: target_hosts | length > 0
      ignore_errors: yes
      tags: [ssh_test]

    - name: Test SSH connectivity for oracle user
      become_user: oracle
      shell: |
        for node in {{ target_hosts | join(' ') }}; do
          echo "Testing oracle SSH to $node:"
          ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no oracle@$node 'echo "Successfully connected to $HOSTNAME as oracle user"' || echo "Failed to connect to $node"
        done
      register: oracle_ssh_test
      when: target_hosts | length > 0
      ignore_errors: yes
      tags: [ssh_test]

    # Display results
    - name: Display SSH test results
      debug:
        msg: |
          Grid SSH Test Results:
          {{ grid_ssh_test.stdout | default('No SSH test performed') }}

          Oracle SSH Test Results:
          {{ oracle_ssh_test.stdout | default('No SSH test performed') }}
      tags: [ssh_test]

  handlers:
    - name: restart sshd
      systemd:
        name: sshd
        state: restarted 