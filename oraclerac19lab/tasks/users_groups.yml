---
# Oracle Users and Groups Configuration

- name: Create Oracle groups
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ oracle_groups }}"
  tags: oracle_groups

- name: Create Oracle directory structure
  file:
    path: "{{ item }}"
    state: directory
    mode: '0775'
  loop:
    - "{{ oracle_base }}"
    - "{{ oracle_grid_home }}"
    - "{{ grid_base }}"
    - "{{ oracle_db_home }}"
    - "/services/oracle/gridhome"
    - "/services/oracle/orahome"
  tags: oracle_directories

- name: Create grid user
  user:
    name: grid
    uid: "{{ oracle_users.grid.uid }}"
    group: "{{ oracle_users.grid.primary_group }}"
    groups: "{{ oracle_users.grid.secondary_groups }}"
    shell: /bin/bash
    home: "{{ oracle_users.grid.home }}"
    state: present
    append: yes
  tags: grid_user

- name: Create oracle user
  user:
    name: oracle
    uid: "{{ oracle_users.oracle.uid }}"
    group: "{{ oracle_users.oracle.primary_group }}"
    groups: "{{ oracle_users.oracle.secondary_groups }}"
    shell: /bin/bash
    home: "{{ oracle_users.oracle.home }}"
    state: present
    append: yes
  tags: oracle_user


- name: Set permissions for Oracle base directory
  file:
    path: "{{ oracle_base }}"
    state: directory
    recurse: yes
    owner: oracle
    group: oinstall
    mode: '0775'
  tags: oracle_permissions

- name: Set permissions for Grid directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: grid
    group: oinstall
  loop:
    - "{{ oracle_grid_home | dirname }}"
    - "{{ oracle_users.grid.home }}"
  tags: grid_permissions


- name: Generate SSH keys for oracle user
  user:
    name: oracle
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  tags: oracle_ssh

- name: Generate SSH keys for grid user
  user:
    name: grid
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  tags: grid_ssh

- name: Read oracle public key
  slurp:
    src: /services/oracle/orahome/.ssh/id_rsa.pub
  register: oracle_public_key
  tags: oracle_ssh_copy

- name: Read grid public key  
  slurp:
    src: /services/oracle/gridhome/.ssh/id_rsa.pub
  register: grid_public_key
  tags: grid_ssh_copy

- name: Copy oracle SSH public key to all other RAC nodes
  authorized_key:
    user: oracle
    key: "{{ hostvars[item]['oracle_public_key']['content'] | b64decode }}"
    state: present
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
    - item != inventory_hostname
  tags: oracle_ssh_copy

- name: Copy grid SSH public key to all other RAC nodes
  authorized_key:
    user: grid
    key: "{{ hostvars[item]['grid_public_key']['content'] | b64decode }}"
    state: present
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
    - item != inventory_hostname
  tags: grid_ssh_copy

- name: Add localhost to known_hosts for oracle user
  known_hosts:
    name: "{{ item }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -H ' + item) }}"
    path: /services/oracle/orahome/.ssh/known_hosts
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
  become_user: oracle
  tags: oracle_known_hosts

- name: Add localhost to known_hosts for grid user
  known_hosts:
    name: "{{ item }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -H ' + item) }}"
    path: /services/oracle/gridhome/.ssh/known_hosts
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
  become_user: grid
  tags: grid_known_hosts

- name: Test SSH connectivity for oracle user
  shell: ssh -o BatchMode=yes -o ConnectTimeout=5 oracle@{{ item }} 'echo "SSH connection successful from $(hostname) to {{ item }}"'
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
    - item != inventory_hostname
  become_user: oracle
  register: oracle_ssh_test
  ignore_errors: yes
  tags: ssh_test

- name: Test SSH connectivity for grid user
  shell: ssh -o BatchMode=yes -o ConnectTimeout=5 grid@{{ item }} 'echo "SSH connection successful from $(hostname) to {{ item }}"'
  with_items: "{{ groups['oracle_rac'] | default([]) }}"
  when: 
    - groups['oracle_rac'] is defined
    - groups['oracle_rac'] | length > 0
    - item != inventory_hostname
  become_user: grid
  register: grid_ssh_test
  ignore_errors: yes
  tags: ssh_test

- name: Display SSH test results for oracle
  debug:
    msg: "Oracle SSH test: {{ item.stdout | default(item.stderr) }}"
  with_items: "{{ oracle_ssh_test.results }}"
  when: oracle_ssh_test is defined and not item.skipped | default(false)
  tags: ssh_test

- name: Display SSH test results for grid  
  debug:
    msg: "Grid SSH test: {{ item.stdout | default(item.stderr) }}"
  with_items: "{{ grid_ssh_test.results }}"
  when: grid_ssh_test is defined and not item.skipped | default(false)
  tags: ssh_test

- name: Set passwords for Oracle users
  shell: "echo {{ item.value.password }} | passwd --stdin {{ item.key }}"
  loop: "{{ oracle_users | dict2items }}"
  no_log: true
  tags: user_passwords 

- name: Debug SSH equivalency variables
  debug:
    msg: |
      inventory_hostname: {{ inventory_hostname }}
      groups['oracle_rac_node1']: {{ groups['oracle_rac_node1'] | default('NOT DEFINED') }}
      groups['oracle_rac']: {{ groups['oracle_rac'] | default('NOT DEFINED') }}
      group_names: {{ group_names }}
      ansible_fqdn: {{ ansible_fqdn | default('NOT SET') }}
  tags: ssh_debug



# Create bash profiles directly - Simple and reliable approach
- name: Create Oracle directory structure first
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    recurse: yes
  with_items:
    - /services/oracle
    - /services/oracle/gridhome
    - /services/oracle/orahome
    - /services/oracle/grid/gridbase
    - /services/oracle/grid/19.3/grid_home
    - /services/oracle/db/19.3/db_home
  tags: [create_dirs, bash_profiles]

- name: Create grid user bash profile directly (Node 1)
  copy:
    dest: /services/oracle/gridhome/.bash_profile
    content: |
      # .bash_profile for grid user - Node 1
      
      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
          . ~/.bashrc
      fi
      
      # Oracle Grid Infrastructure Environment
      export ORACLE_BASE=/services/oracle/grid/gridbase
      export ORACLE_HOME=/services/oracle/grid/19.3/grid_home
      export ORACLE_SID=+ASM1
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
      
      # Grid Infrastructure specific
      export GRID_HOME=$ORACLE_HOME
      export ASM_HOME=$ORACLE_HOME
      
      umask 022
    mode: '0644'
  when: "'oracle_rac_node1' in group_names"
  tags: [create_profiles, bash_profiles]

- name: Create grid user bash profile directly (Node 2)
  copy:
    dest: /services/oracle/gridhome/.bash_profile
    content: |
      # .bash_profile for grid user - Node 2
      
      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
          . ~/.bashrc
      fi
      
      # Oracle Grid Infrastructure Environment
      export ORACLE_BASE=/services/oracle/grid/gridbase
      export ORACLE_HOME=/services/oracle/grid/19.3/grid_home
      export ORACLE_SID=+ASM2
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
      
      # Grid Infrastructure specific
      export GRID_HOME=$ORACLE_HOME
      export ASM_HOME=$ORACLE_HOME
      
      umask 022
    mode: '0644'
  when: "'oracle_rac_node2' in group_names"
  tags: [create_profiles, bash_profiles]

- name: Create oracle user bash profile directly (Node 1)
  copy:
    dest: /services/oracle/orahome/.bash_profile
    content: |
      # .bash_profile for oracle user - Node 1
      
      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
          . ~/.bashrc
      fi
      
      # Oracle Database Environment
      export ORACLE_BASE=/services/oracle
      export ORACLE_HOME=/services/oracle/db/19.3/db_home
      export ORACLE_SID=rac1
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
      
      # Oracle specific
      export TNS_ADMIN=$ORACLE_HOME/network/admin
      export ORA_NLS11=$ORACLE_HOME/nls/data
      
      umask 022
    mode: '0644'
  when: "'oracle_rac_node1' in group_names"
  tags: [create_profiles, bash_profiles]

- name: Create oracle user bash profile directly (Node 2)
  copy:
    dest: /services/oracle/orahome/.bash_profile
    content: |
      # .bash_profile for oracle user - Node 2
      
      # Get the aliases and functions
      if [ -f ~/.bashrc ]; then
          . ~/.bashrc
      fi
      
      # Oracle Database Environment
      export ORACLE_BASE=/services/oracle
      export ORACLE_HOME=/services/oracle/db/19.3/db_home
      export ORACLE_SID=rac2
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
      
      # Oracle specific
      export TNS_ADMIN=$ORACLE_HOME/network/admin
      export ORA_NLS11=$ORACLE_HOME/nls/data
      
      umask 022
    mode: '0644'
  when: "'oracle_rac_node2' in group_names"
  tags: [create_profiles, bash_profiles]

- name: Set ownership after users are created
  shell: |
    # Only set ownership if users exist
    if id grid >/dev/null 2>&1; then
      chown grid:oinstall /services/oracle/gridhome/.bash_profile 2>/dev/null || true
      chown -R grid:oinstall /services/oracle/gridhome 2>/dev/null || true
    fi
    if id oracle >/dev/null 2>&1; then
      chown oracle:oinstall /services/oracle/orahome/.bash_profile 2>/dev/null || true
      chown -R oracle:oinstall /services/oracle/orahome 2>/dev/null || true
    fi
  ignore_errors: yes
  tags: [set_ownership, bash_profiles]

# Simple verification and testing
- name: Verify bash profiles were created
  stat:
    path: "{{ item }}"
  register: bash_profile_verification
  with_items:
    - /services/oracle/gridhome/.bash_profile
    - /services/oracle/orahome/.bash_profile
  tags: [verify_bash_profiles, bash_profiles]

- name: Display bash profile verification results
  debug:
    msg: |
      File: {{ item.item }}
      Exists: {{ item.stat.exists }}
      Size: {{ item.stat.size | default('0') }} bytes
  with_items: "{{ bash_profile_verification.results }}"
  tags: [verify_bash_profiles, bash_profiles]

- name: Test bash profiles (when users exist)
  shell: |
    if id grid >/dev/null 2>&1; then
      echo "Testing grid user:"
      su - grid -c "source ~/.bash_profile 2>/dev/null && echo 'Grid ORACLE_SID='$ORACLE_SID" || echo "Grid profile test failed"
    fi
    if id oracle >/dev/null 2>&1; then
      echo "Testing oracle user:"
      su - oracle -c "source ~/.bash_profile 2>/dev/null && echo 'Oracle ORACLE_SID='$ORACLE_SID" || echo "Oracle profile test failed"
    fi
  register: profile_test_results
  ignore_errors: yes
  tags: [test_bash_profiles, bash_profiles]

- name: Display profile test results
  debug:
    var: profile_test_results.stdout_lines
  when: profile_test_results is defined
  tags: [test_bash_profiles, bash_profiles]
